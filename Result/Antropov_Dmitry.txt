Задание.
В файле <фамилия>_<имя>.txt опиши текстом, как устроено решение, на каких исходных данных оно работает особенно эффективно, 
а на каких ведет себя наихудшим образом. Мы ожидаем 100-150 слов.

Первое, что делает решение - считывает файл формата json, используя библиотеу NewtonSoft.Json. Считывание производим в неизменяемые классы Field, Piece, Cell. Весь файл считываем в класс Field. Piece и Cell - аналоги классов, используемых Json-ом.
Неизменяемый класс Step - содержит все состояние игрового поля, занятые ячейки, длину, ширину и т.д. Пробегая по командам  используем конструкцию вида step = step.NextStep(command) тем самым переписываем текущее состояние для поддержание неизменяемости.
Для хранения ячеек используем коллекции ImmutableHashSet и ImmutableList. HashSet , т.к. понадобятся операции объединения, пересечения.. У класса Cell добавим метод getHashCode().
В зависимости от поступившей команды выполняем соответсвующие действия, преимущественно используем Linq.
В зависимости от команды понадобилось переопределить конструктор класса Step. Получилось 4 конструктора: public, конструктор копирования, конструктор с модификацией поля и конструктор с добавлением новой фигуры.
Минусы решения - огромный класс Step, который практически и выполняет всю задачу. Лучше бы разбить на несколько. Этого не сделал, т.к. пришлось бы тащить за собой много лишних данных.
Наиболее эффективно - когда мало входных данных)
Наихудшим образом - когда много входных данных)